ALTER SESSION SET "_ORACLE_SCRIPT"=true;

DROP USER tuning CASCADE;

CREATE USER tuning IDENTIFIED BY tuning;

GRANT DBA, CONNECT, RESOURCE TO tuning;

-- 실행계획의 단계별 일량 정보 확인을 위해 다음 권한 부여
-- DBMS_XPLAN.DISPLAY_CURSOR 함수를 사용 할 수 있음

-- EXPLAIN PLAN FOR 대신 힌트를 사용
-- SELECT /*+ GATHER_PLAN_STATISTICS */ ~

-- 실행계획 확인
-- SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR(NULL, NULL, 'ALLSTATS LAST -ROWS +PREDICATE +ALIAS +OUTLINE'));

--GRANT SELECT ON V_$SQL TO tuning;
--GRANT SELECT ON V_$SQL_PLAN_STATISTICS_ALL TO tuning;
--GRANT SELECT ON V_$SESSION TO tuning;
--GRANT SELECT ON V_$SQL_PLAN TO tuning;
--GRANT SELECT ANY DICTIONARY TO tuning;

CONN tuning/tuning

-- ---------------------------------------------------------------------------------------------------------------
-- 쇼핑몰

-- 고객 테이블(CUSTOMERS) : 1만건의 데이터 저장
-- CUSTNO : 고객번호(1에서 10000까지 고유한 값. 기본키)
-- CNAME : 고객명(랜덤 문자열)
-- PHONE : 전화번호(1000001~1010000)
-- CITY : 거주지(10개 종류. 서울, 부산, 대전, 제주, 광주, 대구, 인천, 성남, 강원, 춘천)
-- GRADE : 등급(3종류, NORMAL, VIP, VVIP)
-- BIRTHDATE : 생일(랜덤)
-- GENDER : 성별(2종류, M, F)

CREATE TABLE CUSTOMERS
(CUSTNO NUMBER(10) CONSTRAINT CUSTOMERS_PK PRIMARY KEY,
 CNAME VARCHAR2(20),
 PHONE VARCHAR2(20),
 CITY VARCHAR2(20),
 GRADE VARCHAR2(20),
 BIRTHDATE DATE,
 GENDER VARCHAR2(5),
 DUMMY VARCHAR2(4000));

BEGIN
  DBMS_RANDOM.SEED(0);
  FOR NO IN 1..10000 LOOP
    INSERT INTO CUSTOMERS
    VALUES(NO, DBMS_RANDOM.STRING('U', 10), 1000000 + NO, 
           DECODE(FLOOR(DBMS_RANDOM.VALUE() * 10), 0, '서울', 1, '부산', 2, '대전', 3, '제주', 4, '광주', 5, '대구', 6, '인천', 7, '성남', 8, '강원', 9, '춘천'),
	   DECODE(FLOOR(DBMS_RANDOM.VALUE() * 3), 0, 'NORMAL', 1, 'VIP', 2, 'VVIP'),
	   TO_DATE('19800101', 'YYYYMMDD') + FLOOR(DBMS_RANDOM.VALUE() * 3000),
	   DECODE(FLOOR(DBMS_RANDOM.VALUE() * 2), 0, 'M', 1, 'F'),
	   DBMS_RANDOM.STRING('U', 2000));
  END LOOP;
END;
/

COMMIT;

-- 상품 테이블(PRODUCTS) : 1000건의 데이터 저장
-- PRODNO : 상품코드(10001에서 11000까지 고유한 값. 기본키)
-- PNAME : 상품명(랜덤 문자열)
-- PRICE : 상품 가격(랜덤 값)
-- PSIZE : 상품 사이즈(5개 종류. S, L, XL, 2XL, 3XL)
-- COLOR : 색상(10개 종류. 'WHITE', 'BLACK', 'RED', 'ORANGE', 'YELLOW', 'GREEN', 'BLUE', 'BROWN', 'PURPLE', 'SILVER')

CREATE TABLE PRODUCTS
(PRODNO NUMBER(10) CONSTRAINT PRODUCTS_PK PRIMARY KEY,
 PNAME VARCHAR2(20),
 PRICE NUMBER(10),
 PSIZE VARCHAR2(10),
 COLOR VARCHAR2(10),
 DUMMY VARCHAR2(4000));

BEGIN
  DBMS_RANDOM.SEED(0);
  FOR NO IN 1..1000 LOOP
    INSERT INTO PRODUCTS
    VALUES(10000 + NO, DBMS_RANDOM.STRING('U', 10), CEIL(DBMS_RANDOM.VALUE() * 1000) * 50, 
           DECODE(FLOOR(DBMS_RANDOM.VALUE() * 5), 0, 'S', 1, 'L', 2, 'XL', 3, '2XL', 4, '3XL'),
	   DECODE(FLOOR(DBMS_RANDOM.VALUE() * 10), 0, 'WHITE', 1, 'BLACK', 2, 'RED',   3, 'ORANGE', 4, 'YELLOW', 
	                                           5, 'GREEN', 6, 'BLUE',  7, 'BROWN', 8, 'PURPLE', 9, 'SILVER'),
	   DBMS_RANDOM.STRING('U', 2000));
  END LOOP;
END;
/

COMMIT;

-- 택배 회사 테이블(DELIVERY) : 100건의 테이터 저장
-- CODE : 회사 고유 코드(1에서 10까지 고유한 값. 기본키)
-- NAME : 회사명
-- LOCATION : 주소명

CREATE TABLE DELIVERY
(CODE NUMBER(3) CONSTRAINT DELIVERY_PK PRIMARY KEY,
 NAME VARCHAR2(20),
 LOCATION VARCHAR2(20),
 DUMMY VARCHAR2(4000));

BEGIN
  DBMS_RANDOM.SEED(0);
  FOR NO IN 1..100 LOOP
    INSERT INTO DELIVERY VALUES(NO, DBMS_RANDOM.STRING('U', 10), DBMS_RANDOM.STRING('U', 10), DBMS_RANDOM.STRING('U', 2000));
  END LOOP;
END;
/

COMMIT;

-- 주문 테이블(ORDERS) : 10만건의 데이터 저장
-- ORDERNO : 주문번호(1에서 100000까지 고유한 값. 기본키)
-- ADDRESS : 배송지(랜덤 문자열)
-- ORDERDATE : 주문일자(랜덤 날짜)
-- TOTAL : 전체 주문액
-- PAYTYPE : 지불방식(3개 종류. 신용카드, 체크카드, 계좌이체)
-- STATUS : 배송상태(5개 종류. 결제완료, 배송준비중, 배송중, 배송완료, 구매확정)
-- CUSTNO : 고객번호(외래키. CUSTOMERS(CUSTNO) 참조)
-- CODE : 택배회사 코드(외래키. DELIVERY(CODE) 참조)

CREATE TABLE ORDERS
(ORDERNO NUMBER(10) CONSTRAINT ORDERS_PK PRIMARY KEY,
 ADDRESS VARCHAR2(20),
 ORDERDATE DATE,
 TOTAL NUMBER(10),
 PAYTYPE VARCHAR2(20),
 STATUS VARCHAR2(20),
 CUSTNO NUMBER(10),
 CODE NUMBER(3),
 DUMMY VARCHAR2(4000));

-- 상세 주문(ORDERDETAILS) : 약 20만건의 데이터 저장
-- ORDERSEQ : 일련번호(기본키)
-- ORDERNO : 주문번호(외래키. ORDERS(ORDERNO) 참조)
-- PRODNO : 상품번호(외래키. PRODUCTS(PRODNO) 참조)
-- PRICE : 주문시점의 상품가격
-- QTY : 수량(랜덤값)
-- OPTION : 추가 옵션(랜덤 문자열)

CREATE TABLE ORDERDETAILS
(ORDERSEQ NUMBER(10) CONSTRAINT ORDERDETAILS_PK PRIMARY KEY,
 ORDERNO NUMBER(10),
 PRODNO NUMBER(10),
 PRICE NUMBER(10),
 QTY NUMBER(10),
 OPTIONS VARCHAR2(4000));

DECLARE
  CURSOR c(qty NUMBER) IS 
     SELECT prodno, price 
     FROM (SELECT prodno, price FROM PRODUCTS ORDER BY DBMS_RANDOM.VALUE()) 
     WHERE ROWNUM <= qty;
  V_SELECTED NUMBER(3);
  V_QTY NUMBER(3);
  V_ORDER_TOTAL NUMBER(10);
  V_SEQ NUMBER(10) := 0;
BEGIN
  DBMS_RANDOM.SEED(0);
  FOR NO IN 1..100000 LOOP
	V_SELECTED := CEIL(DBMS_RANDOM.VALUE() * 3);
	V_ORDER_TOTAL := 0;
	FOR p IN c(V_SELECTED) LOOP
		V_SEQ := V_SEQ + 1;
		V_QTY := CEIL(DBMS_RANDOM.VALUE() * 10);
		V_ORDER_TOTAL := V_ORDER_TOTAL + p.price * V_QTY;
		INSERT INTO ORDERDETAILS
		VALUES(V_SEQ, NO, p.prodno, p.price, V_QTY, DBMS_RANDOM.STRING('U', 2000));
	END LOOP;
	INSERT INTO ORDERS
	VALUES(NO, DBMS_RANDOM.STRING('U', 10), TO_DATE('2015/12/31', 'YYYY/MM/DD') - TRUNC(DBMS_RANDOM.VALUE() * 1000), V_ORDER_TOTAL,
		DECODE(FLOOR(DBMS_RANDOM.VALUE() * 3), 0, '신용카드', 1, '체크카드', 2, '계좌이체'),
		DECODE(FLOOR(DBMS_RANDOM.VALUE() * 5), 0, '결제완료', 1, '배송준비중', 2, '배송중', 3, '배송완료', 4, '구매확정'),  
		CEIL(10000 * DBMS_RANDOM.VALUE()), NULLIF(CEIL(100 * DBMS_RANDOM.VALUE()), 10), DBMS_RANDOM.STRING('U', 2000));  
	COMMIT;
  END LOOP;
END;
/

COMMIT;

-- 외래키에 인덱스 설정
-- CREATE INDEX ORDERS_CUSTNO_IDX ON ORDERS(CUSTNO);
-- CREATE INDEX ORDERS_CODE_IDX ON ORDERS(CODE);
-- CREATE INDEX OD_ORDERNO_IDX ON ORDERDETAILS(ORDERNO);
-- CREATE INDEX OD_PRODNO_IDX ON ORDERDETAILS(PRODNO);

-- 통계 수집
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'CUSTOMERS', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'PRODUCTS', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'DELIVERY', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'ORDERS', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'ORDERDETAILS', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);

alter session set nls_language='AMERICAN';
alter session set nls_territory='AMERICA';

CREATE TABLE DEPT
       (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
	DNAME VARCHAR2(14) ,
	LOC VARCHAR2(13) ) ;

CREATE TABLE EMP
       (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);
INSERT INTO DEPT VALUES
	(10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES
	(30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES
	(40,'OPERATIONS','BOSTON');
INSERT INTO EMP VALUES
(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);
INSERT INTO EMP VALUES
(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);
INSERT INTO EMP VALUES
(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);
INSERT INTO EMP VALUES
(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);
INSERT INTO EMP VALUES
(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);
INSERT INTO EMP VALUES
(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);
INSERT INTO EMP VALUES
(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);
INSERT INTO EMP VALUES
(7788,'SCOTT','ANALYST',7566,to_date('13-6-87','dd-mm-rr')-85,3000,NULL,20);
INSERT INTO EMP VALUES
(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);
INSERT INTO EMP VALUES
(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);
INSERT INTO EMP VALUES
(7876,'ADAMS','CLERK',7788,to_date('13-7-87','dd-mm-rr')-51,1100,NULL,20);
INSERT INTO EMP VALUES
(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);
INSERT INTO EMP VALUES
(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO EMP VALUES
(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);

CREATE TABLE SALGRADE
      ( GRADE NUMBER,
	LOSAL NUMBER,
	HISAL NUMBER );
INSERT INTO SALGRADE VALUES (1,700,1200);
INSERT INTO SALGRADE VALUES (2,1201,1400);
INSERT INTO SALGRADE VALUES (3,1401,2000);
INSERT INTO SALGRADE VALUES (4,2001,3000);
INSERT INTO SALGRADE VALUES (5,3001,9999);

commit;

alter session set nls_language='KOREAN';
alter session set nls_territory='KOREA';

EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'DEPT', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'EMP', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);
EXEC DBMS_STATS.GATHER_TABLE_STATS('tuning', 'SALGRADE', CASCADE=>TRUE, ESTIMATE_PERCENT=>100);

EXIT;
